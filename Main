package br.com.gnovais;

import java.io.Console;
import java.sql.SQLException;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class Main {

    static Console console = System.console();
    public static void main(String[] args) {
        
        int opcao;
        do {
            exibirMenu();
            opcao = Integer.parseInt(console.readLine());
            switch (opcao) {
                case 0 -> salvarVenda();
                case 1 -> buscarTodasVendas();
                case 2 -> buscarVendaPorId();
                case 3 -> atualizarVenda();
                case 4 -> excluirVenda();
                case 5 -> System.exit(0);
                default -> System.out.println("Opção inválida!");
            }
        } while (opcao != 5);
        
    }

    private static void exibirMenu() {
        System.out.println("\n### Menu de Operações ###");
        System.out.println("0. Salvar nova venda");
        System.out.println("1. Buscar todas as Vendas");
        System.out.println("2. Buscar Venda por ID");
        System.out.println("3. Atualizar Venda");
        System.out.println("4. Excluir Venda");
        System.out.println("5. Sair do programa");
        System.out.print("Escolha uma opção: ");
    }

    private static void salvarVenda() {
        System.out.println("\n### Criar Nova Venda ###");

        System.out.println("\nValor:");
        float valor = Float.parseFloat(console.readLine());

        System.out.println("\nForma de pagamento:");
        String formaDePagamento = console.readLine();

        System.out.println("\nHorário:");

        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        Date data;
        Time horaTime;

        Venda venda;

        VendaDAO vendaDAO = new VendaDAO();

        try {
            data = sdf.parse(console.readLine());
            horaTime = new java.sql.Time(data.getTime());     
            
            venda = new Venda(valor, formaDePagamento, horaTime);

            try{
                vendaDAO.salvar(venda);
                System.out.println("Venda salva corretamente!");
            }catch(SQLException e)
            {
                System.out.println("Erro: Não foi possível salvar a venda");
            }

        } catch (ParseException e) {
            System.out.println("Não foi possível converter a hora corretamente!");
        }
    }

    private static void imprimirVenda(Venda venda)
    {
        System.out.print("ID: " + venda.id() + " ");
        System.out.printf("Valor: R$%.2f ", venda.valor());
        System.out.print("Forma de Pagamento: " + venda.formaDePagamento() + " ");
        System.out.println("Horário: " + venda.hora() + "\n");
    }

    private static void buscarTodasVendas() {
        System.out.println("\n### Buscar Todas As Vendas ###");  
        
        VendaDAO vendaDAO = new VendaDAO();

        try {
            List<Venda> vendasEncontradas = vendaDAO.buscarPorTodasVendas();

            if (vendasEncontradas != null)
            {
                System.out.println("Lista de vendas!");
                for (Venda venda : vendasEncontradas)
                {
                    imprimirVenda(venda);
                }
            }else{
                System.out.println("Não foi encontrada nenhuma venda!");
            }
            
        } catch (SQLException e) {
            System.out.println("Erro: Não foi possível encontrar todas as vendas!");
        }
    }

    private static void buscarVendaPorId() {
        System.out.println("\n### Buscar Venda Por ID ###");

        System.out.println("\nID:");
        int id = Integer.parseInt(console.readLine());

        System.out.println("ID informado:" + id);

        VendaDAO vendaDAO = new VendaDAO();

        @SuppressWarnings("unused")
        Venda venda;

        try {
            venda = vendaDAO.buscarPorID(id);

            if (venda != null){
                System.out.println("Encontramos a seguinte venda através do ID informado:");
                imprimirVenda(venda);
            }else{
                System.out.println("Não foi encontrada nenhuma venda com o ID informado!");
            }

        } catch (SQLException e) {
            System.out.println("Erro: Não foi possível encontrar a venda com o ID informado!");
        }
    }

    private static void atualizarVenda() {
        System.out.println("\n### Atualizar Venda ###");

        System.out.println("\nID do produto para atualizar:");
        int id = Integer.parseInt(console.readLine());

        System.out.println("ID informado:" + id);

        VendaDAO vendaDAO = new VendaDAO();
        
        @SuppressWarnings("unused")
        Venda vendaAntes;

        @SuppressWarnings("unused")
        Venda vendaDepois;

        try {
            vendaAntes = vendaDAO.buscarPorID(id);

            if (vendaAntes != null){
                
                System.out.printf("\nO valor anterior era: R$%.2f\nNovo valor:\n", vendaAntes.valor());
                float valor = Float.parseFloat(console.readLine());

                System.out.println("\nO forma de pagamento anterior era:" + vendaAntes.formaDePagamento() + "\nNova forma de pagamento:");
                String formaDePagamento = console.readLine();

                System.out.println("\nO horário anterior era:" + vendaAntes.hora() + "\nNovo horário:");

                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                Date data;
                Time horaTime;

                try {
                    data = sdf.parse(console.readLine());
                    horaTime = new java.sql.Time(data.getTime());     
                
                    vendaDepois = new Venda(vendaAntes.id(), valor, formaDePagamento, horaTime);

                    try{
                        vendaDAO.atualizar(vendaDepois);
                        System.out.println("Venda atualizada corretamente!");
                    }catch(SQLException e)
                    {
                        System.out.println("Erro: Não foi possível salvar a venda");
                    }


                }catch(ParseException e)
                {
                    System.out.println("Não foi possível atualizar o produto");
                }

            }else{
                System.out.println("Não foi encontrada nenhuma venda com o ID informado!");
            }

        } catch (SQLException e) {
            System.out.println("Erro: Não foi possível atualizar a venda com o ID informado!");
        }
    }

    private static void excluirVenda() {
        System.out.println("\n### Excluir Venda ###");

        System.out.println("\nID do produto para excluir:");
        int id = Integer.parseInt(console.readLine());

        System.out.println("ID informado:" + id);

        VendaDAO vendaDAO = new VendaDAO();
        
        @SuppressWarnings("unused")
        Venda vendaAExcluir;

        try {
            vendaAExcluir = vendaDAO.buscarPorID(id);

            if (vendaAExcluir != null){
                vendaDAO.excluir(vendaAExcluir.id());
                System.out.println("Venda excluída corretamente!");
            }else{
                System.out.println("Não foi encontrada nenhuma venda com o ID informado!");
            }

        } catch (SQLException e) {
            System.out.println("Erro: Não foi possível excluir a venda com o ID informado!");
        }
    }


}
