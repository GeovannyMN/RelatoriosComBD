package br.com.gnovais;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class VendaDAO {

    public void salvar(Venda venda) throws SQLException{

        var sql = "insert into venda (valor, formadepagamento, hora) values (?, ?, ?)";

        try (var conexao = Conexao.obterConexao();
             var stmt = conexao.prepareStatement(sql)){

            stmt.setFloat(1, venda.valor());
            stmt.setString(2, venda.formaDePagamento());
            
            Time horaConvertida = new Time(venda.hora().getTime());
            stmt.setTime(3, horaConvertida);

            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new SQLException(e);
        }
    }

    public List<Venda> buscarPorTodasVendas() throws SQLException{
        List<Venda> vendas = new ArrayList<>();

        var sql = "select * from minhasvendas.venda";

        try (var conexao = Conexao.obterConexao();
             var stmt = conexao.prepareStatement(sql)){

                try(ResultSet rs = stmt.executeQuery()){
                    while(rs.next()){
                        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                        Time horaTime = rs.getTime("hora");

                        @SuppressWarnings("unused")
                        Date horaData;
                        try {

                            horaData = sdf.parse(horaTime.toString());
                            Venda venda = new Venda(rs.getInt("id"),
                            rs.getFloat("valor"),
                            rs.getString("formaDePagamento"), 
                            horaTime);

                            vendas.add(venda);
                        } catch (ParseException e) {
                            System.out.println("Não foi possível converter o horário corretamente!");
                        }
                    }
                }            
        } catch (SQLException e) {
            throw new SQLException(e);
        }

        return vendas;
    }

    public Venda buscarPorID(int id) throws SQLException{

        var sql = "select * from minhasvendas.venda where id = ?";

        Venda venda = null;

        try (var conexao = Conexao.obterConexao();
             var stmt = conexao.prepareStatement(sql)){

                stmt.setInt(1, id);                

                try(ResultSet rs = stmt.executeQuery()){
                    while(rs.next()){
                        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                        Time horaTime = rs.getTime("hora");

                        @SuppressWarnings("unused")
                        Date horaData;
                        try {

                            horaData = sdf.parse(horaTime.toString());
                            venda = new Venda(rs.getInt("id"),
                            rs.getFloat("valor"),
                            rs.getString("formaDePagamento"), 
                            horaTime);

                        } catch (ParseException e) {
                            System.out.println("Não foi possível converter o horário corretamente!");
                        }
                    }
                }            
        } catch (SQLException e) {
            throw new SQLException(e);
        }

        return venda;
    }

    public List<Venda> buscarVendaPorValor (float valor) throws SQLException{
        List<Venda> vendas = new ArrayList<>();

        var sql = "select * from minhasvendas.venda where valor >= ?";

        Venda venda;

        try (var conexao = Conexao.obterConexao();
             var stmt = conexao.prepareStatement(sql)){

                stmt.setFloat(1, valor);

                try (ResultSet rs = stmt.executeQuery()){
                    while(rs.next()){
                        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                        Time horaTime = rs.getTime("hora");

                        @SuppressWarnings("unused")
                        Date horaData;
                        try {

                            horaData = sdf.parse(horaTime.toString());
                            venda = new Venda(rs.getInt("id"),
                            rs.getFloat("valor"),
                            rs.getString("formaDePagamento"), 
                            horaTime);

                            vendas.add(venda);

                        } catch (ParseException e) {
                            System.out.println("Não foi possível converter o horário corretamente!");
                        }
                    } 
                } 
        }catch (SQLException e){
            throw new SQLException(e);
        }
        return vendas;
    }

    public List<Venda> buscarVendaPorFormaDePagamento(String formaDePagamento) throws SQLException {
        List<Venda> vendas = new ArrayList<>();
        
        var sql = "select * from minhasvendas.venda where formaDePagamento = ?";

        Venda venda;

        try (var conexao = Conexao.obterConexao();
             var stmt = conexao.prepareStatement(sql)){

            stmt.setString(1, formaDePagamento);

            try (ResultSet rs = stmt.executeQuery()){
                    while(rs.next()){
                        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                        Time horaTime = rs.getTime("hora");

                        @SuppressWarnings("unused")
                        Date horaData;
                        try {

                            horaData = sdf.parse(horaTime.toString());
                            venda = new Venda(rs.getInt("id"),
                            rs.getFloat("valor"),
                            rs.getString("formaDePagamento"), 
                            horaTime);

                            vendas.add(venda);
                        } catch (ParseException e) {
                            System.out.println("Não foi possível converter o horário corretamente!");
                        }
                    } 
                } 

        }catch (SQLException e){
            throw new SQLException(e);
        }

        return vendas;
    }

    public List<Venda> buscarVendaPorHorario(Time horario) throws SQLException{
        List<Venda> vendas = new ArrayList<>();
        var sql = "select * from minhasvendas.venda where hora = ?";

        Venda venda;

        try (var conexao = Conexao.obterConexao();
             var stmt = conexao.prepareStatement(sql)){
            stmt.setTime(1, horario);

            try (ResultSet rs = stmt.executeQuery()){
                    while(rs.next()){
                        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                        Time horaTime = rs.getTime("hora");

                        @SuppressWarnings("unused")
                        Date horaData;
                        try {

                            horaData = sdf.parse(horaTime.toString());
                            venda = new Venda(rs.getInt("id"),
                            rs.getFloat("valor"),
                            rs.getString("formaDePagamento"), 
                            horaTime);

                            vendas.add(venda);
                        } catch (ParseException e) {
                            System.out.println("Não foi possível converter o horário corretamente!");
                        }
                    } 
                } 
        }catch (SQLException e){
            throw new SQLException(e);
        }

        return vendas;
    }

    public void atualizar(Venda venda) throws SQLException{

        var sql = "update venda set valor = ?, formadepagamento =?, hora = ? where id = ?";

        try (var conexao = Conexao.obterConexao();
             var stmt = conexao.prepareStatement(sql)){

            stmt.setFloat(1, venda.valor());
            stmt.setString(2, venda.formaDePagamento());
            
            Time horaConvertida = new Time(venda.hora().getTime());
            stmt.setTime(3, horaConvertida);

            stmt.setInt(4, venda.id());

            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new SQLException(e);
        }
    }

    public void excluir(int id) throws SQLException{
        var sql = "delete from venda where id = ?";

        try (var conexao = Conexao.obterConexao();
        var stmt = conexao.prepareStatement(sql)){
            stmt.setInt(1, id);
            
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new SQLException(e);
        }    

    }
}
